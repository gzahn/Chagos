dpi=300,width = 12, height = 6,device = "png")
# Relative abundance plots ####
# Top 12 taxa with highest relative abundance
top12 <- get_top_taxa(ps, 11, relative = TRUE, discard_other = FALSE,
other_label = "Other")
# Transform top-12 phyloseq object to relative abundance #
top12_ra <- transform_sample_counts(top12, function(x) x/sum(x))
ps_family <- phyloseq::tax_glom(top12_ra, "Family")
phyloseq::taxa_names(ps_family) <- phyloseq::tax_table(ps_family)[, "Family"]
#Melt and plot
phyloseq::psmelt(ps_family) %>%
ggplot(data = ., aes(x = ColonyColor, y = Abundance,color=ColonyColor)) +
geom_boxplot(outlier.shape  = NA) +
geom_jitter(height = 0, width = .2,alpha=.5) +
labs(x = "", y = "Abundance\n") +
facet_wrap(~ OTU, scales = "free") +
theme(legend.position = "bottom", axis.text.x = element_blank()) +
scale_color_manual(values = pal[c(11,3,6,1)])
ggsave("./output/figs/most_abundant_families_by_colonycolor.png",dpi=300)
# Ordinations ####
# Transform full phyloseq object to relative abundance (again)
ps_ra <- transform_sample_counts(ps, function(x) x/sum(x))
dca <- ordinate(ps_ra,method="DCA")
nmds <- ordinate(ps_ra,method = "NMDS")
plot_ordination(ps,dca,color = "ColonyColor")
ggsave("./output/figs/DCA_Ordination_by_ColonyColor.png",dpi=300)
plot_ordination(ps,dca,color = "Island")
ggsave("./output/figs/DCA_Ordination_by_Island.png",dpi=300)
plot_ordination(ps,dca,color = "ColonyColor")
# Melt and plot
phyloseq::psmelt(ps_family) %>%
ggplot(data = ., aes(x = ColonyColor, y = Abundance,color=ColonyColor)) +
geom_boxplot(outlier.shape  = NA) +
geom_jitter(height = 0, width = .2,alpha=.5) +
labs(x = "", y = "Abundance\n") +
facet_wrap(~ OTU, scales = "free") +
theme(legend.position = "bottom", axis.text.x = element_blank()) +
scale_color_manual(values = pal[c(11,4,6,1)])
ggsave("./output/figs/most_abundant_families_by_colonycolor.png",dpi=300,width = 10,height = 6)
plot_ordination(ps,dca,color = "ColonyColor") + scale_color_manual(values = c(11,4,6,1))
plot_ordination(ps,dca,color = "ColonyColor") + scale_color_manual(values = pal[c(11,4,6,1)])
ggsave("./output/figs/tempgroup_differential_abundance_plot.png",width = 12,height = 6)
plot(da_analysis_temp)
ggsave("./output/figs/tempgroup_differential_abundance_plot.png",width = 12,height = 6)
plot(da_analysis)
ggsave("./output/figs/colonycolor_differential_abundance_plot.png",dpi = 300,width = 14,height = 6)
plot(da_analysis_temp)
ggsave("./output/figs/tempgroup_differential_abundance_plot.png",width = 16,height = 6)
# Analyses of Chagos Islands coral-associated bacteria 16S Amplicons
# Differential abundance analyses
# Author: Geoffrey Zahn
# Packages and functions ####
library(tidyverse)
library(phyloseq)
library(vegan)
library(MASS)
library(car)
library(ggmap)
library(corncob)
library(patchwork)
library(fantaxtic)
source("./R/plot_bar2.R")
# Custom color palette
pal = c("#c4a113","#c1593c","#643d91","#820616","#477887","#688e52",
"#12aa91","#705f36","#8997b2","#753c2b","#3c3e44","#b3bf2d",
"#82b2a4","#894e7d","#a17fc1","#262a8e","#abb5b5","#000000",
"#493829","#816C5B","#A9A18C","#613318","#855723","#B99C6B",
"#8F3B1B","#D57500","#DBCA69","#404F24","#668D3C","#BDD09F",
"#4E6172","#83929F","#A3ADB8")
palplot <- colorblindr::palette_plot(pal)
# Load data ####
ps <- readRDS("./output/cleaned_ps_object.RDS")
# Differential Abundance Based on Colony Color ####
# Find differentially-abundant groups...plot them as in http://statisticaldiversitylab.com/blog/167093
names(sample_data(ps))
set.seed(123)
da_analysis <- differentialTest(formula = ~ ColonyColor, #abundance
phi.formula = ~ 1, #dispersion
formula_null = ~ 1, #mean
phi.formula_null = ~ 1,
test = "Wald", boot = FALSE,
data = ps,
fdr_cutoff = 0.05)
plot(da_analysis)
ggsave("./output/figs/colonycolor_differential_abundance_plot.png",dpi = 300,width = 14,height = 6)
sigs_colcolor <- otu_to_taxonomy(OTU = da_analysis$significant_taxa, data = ps)
length(sigs_colcolor)
sigs_colcolor
colorblindr::palette_plot(pal)
set.seed(123)
corncob_da1 <- bbdml(formula = OTU8 ~ ColonyColor,
phi.formula = ~ ColonyColor,
data = ps)
corncob_da1 <- bbdml(formula = OTU8 ~ ColonyColor,
phi.formula = ~ ColonyColor,
data = ps)
ps
corncob_da1 <- bbdml(formula = OTU8 ~ ColonyColor,
phi.formula = ~ ColonyColor,
data = ps)
# Load data ####
ps <- readRDS("./output/cleaned_ps_object.RDS")
ps
otu_table(ps)
plot(otu_table(ps))
ord=ordinate(ps)
plot_ordination(ps)
diversity(otu_table(ps))
plot(diversity(otu_table(ps)))
da_analysis
sigs_colcolor <- otu_to_taxonomy(OTU = da_analysis$significant_taxa, data = ps)
sigs_colcolor
length(sigs_colcolor)
set.seed(123)
corncob_da1 <- bbdml(formula = OTU8 ~ ColonyColor,
phi.formula = ~ ColonyColor,
data = ps)
# Analyses of Chagos Islands coral-associated bacteria 16S Amplicons
# Differential abundance analyses
# Author: Geoffrey Zahn
# Packages and functions ####
library(tidyverse)
library(phyloseq)
library(vegan)
library(MASS)
library(car)
library(ggmap)
library(corncob)
library(patchwork)
library(fantaxtic)
source("./R/plot_bar2.R")
# Custom color palette
pal = c("#c4a113","#c1593c","#643d91","#820616","#477887","#688e52",
"#12aa91","#705f36","#8997b2","#753c2b","#3c3e44","#b3bf2d",
"#82b2a4","#894e7d","#a17fc1","#262a8e","#abb5b5","#000000",
"#493829","#816C5B","#A9A18C","#613318","#855723","#B99C6B",
"#8F3B1B","#D57500","#DBCA69","#404F24","#668D3C","#BDD09F",
"#4E6172","#83929F","#A3ADB8")
palplot <- colorblindr::palette_plot(pal)
# Load data ####
ps <- readRDS("./output/cleaned_ps_object.RDS")
# clean taxa names
ps <- clean_taxa_names(ps)
# Differential Abundance Based on Colony Color ####
# Find differentially-abundant groups...plot them as in http://statisticaldiversitylab.com/blog/167093
names(sample_data(ps))
set.seed(123)
da_analysis <- differentialTest(formula = ~ ColonyColor, #abundance
phi.formula = ~ 1, #dispersion
formula_null = ~ 1, #mean
phi.formula_null = ~ 1,
test = "Wald", boot = FALSE,
data = ps,
fdr_cutoff = 0.05)
plot(da_analysis)
ggsave("./output/figs/colonycolor_differential_abundance_plot.png",dpi = 300,width = 14,height = 6)
sigs_colcolor <- otu_to_taxonomy(OTU = da_analysis$significant_taxa, data = ps)
length(sigs_colcolor)
# Analyses of Chagos Islands coral-associated bacteria 16S Amplicons
# Data cleaning and preparation - building a phylogeny
# Author: Geoffrey Zahn
# Packages and functions ####
library(tidyverse)
library(phyloseq)
library(vegan)
library(phangorn)
library(msa)
library(ape)
theme_set(theme_bw())
# Load phyloseq object from 01_Process_Raw_Data.R ####
ps <- readRDS("./output/phyloseq_object_16S_noncontam.RDS")
# Remove non-bacteria/archaea ####
ps <- subset_taxa(ps, Kingdom %in% c("Bacteria","Archaea"))
# Inspect and clean taxonomy
ps <- subset_taxa(ps, Phylum != "NA")
# Tidy up metadata ... proper date format, temp and salinity ranges, etc ####
# List sample variables
glimpse(ps@sam_data)
# Dates
ps@sam_data$date <- as.POSIXct(ps@sam_data$date,format = '%m/%d/%Y')
# Temp
ps@sam_data$`Temp Range (oC)`[is.na(ps@sam_data$`Temp Range (oC)`)] <- "NA-NA"
ps@sam_data$`Temp Range (oC)`[ps@sam_data$`Temp Range (oC)`=="Blank"] <- "Blank-Blank"
min <- as.numeric(unlist(map(str_split(ps@sam_data$`Temp Range (oC)`,"-"),1)))
max <- as.numeric(unlist(map(str_split(ps@sam_data$`Temp Range (oC)`,"-"),2)))
ps@sam_data$TempRangeMin <- min
ps@sam_data$TempRangeMax <- max
# Salinity
ps@sam_data$`Salinity Range (ppt)`[is.na(ps@sam_data$`Salinity Range (ppt)`)] <- "NA-NA"
ps@sam_data$`Salinity Range (ppt)`[ps@sam_data$`Salinity Range (ppt)`=="Blank"] <- "Blank-Blank"
min <- as.numeric(unlist(map(str_split(ps@sam_data$`Salinity Range (ppt)`,"-"),1)))
max <- as.numeric(unlist(map(str_split(ps@sam_data$`Salinity Range (ppt)`,"-"),2)))
ps@sam_data$SalinityRangeMin <- min
ps@sam_data$SalinityRangeMax <- max
# Depth
ps@sam_data$`Depth Range (m)` <- str_remove(ps@sam_data$`Depth Range (m)`,pattern = "m")
ps@sam_data$`Depth Range (m)`[is.na(ps@sam_data$`Depth Range (m)`)] <- "NA-NA"
ps@sam_data$`Depth Range (m)`[ps@sam_data$`Depth Range (m)`=="Blank"] <- "Blank-Blank"
min <- as.numeric(unlist(map(str_split(ps@sam_data$`Depth Range (m)`,"-"),1)))
max <- as.numeric(unlist(map(str_split(ps@sam_data$`Depth Range (m)`,"-"),2)))
ps@sam_data$DepthRangeMin <- min
ps@sam_data$DepthRangeMax <- max
# Remove Blank Controls ####
ps <- subset_samples(ps, Island != "Blank")
# Clean up Sample Data names ####
names(sample_data(ps)) <-
c("LibraryID","Barcode","SampleID","Date","Island","Site","Lat","Lon","ReefType","Exposure",
"SpeciesTentative","SpeciesConfirmed","ColonyColor","AvgSiteTemp","TempRange_C","Salinity",
"SalinityRange_ppt","Depth_m","DepthRange_m","TempRangeMin","TempRangeMax","SalinityRangeMin",
"SalinityRangeMax","DepthRangeMin","DepthRangeMax")
# Convert Sample Data classes ####
glimpse(sample_data(ps))
ps@sam_data$LibraryID <- as.character(ps@sam_data$LibraryID)
ps@sam_data$Lat <- as.numeric(ps@sam_data$Lat)
ps@sam_data$Lon <- as.numeric(ps@sam_data$Lon)
ps@sam_data$AvgSiteTemp <- as.numeric(ps@sam_data$AvgSiteTemp)
ps@sam_data$Salinity <- as.numeric(ps@sam_data$Salinity)
ps@sam_data$Depth_m <- as.numeric(ps@sam_data$Depth_m)
# Change ColonyColor to non-ordered factor (Healthy Coral as reference category)
ps@sam_data$ColonyColor <- plyr::mapvalues(ps@sam_data$ColonyColor,from = unique(ps@sam_data$ColonyColor),
to=c("Healthy","Pale","Bleached","Very pale"))
ps@sam_data$ColonyColor <- factor(ps@sam_data$ColonyColor,
levels = c("Healthy","Pale","Very pale","Bleached"))
# create 4 groups of avg temperature
clus <- kmeans(na.omit(ps@sam_data$AvgSiteTemp), 3)
clus$cluster[which(!is.na(ps@sam_data$AvgSiteTemp))] <- clus$cluster
ps@sam_data$AvgSiteTempGroup <- clus$cluster
plot(ps@sam_data$AvgSiteTemp,ps@sam_data$AvgSiteTempGroup)
ps@sam_data$AvgSiteTempGroup <- plyr::mapvalues(ps@sam_data$AvgSiteTempGroup,
from=as.character(unique(ps@sam_data$AvgSiteTempGroup)),
to=c("<30.5","30.5-31",">31"))
ps@sam_data$AvgSiteTempGroup[which(is.na(ps@sam_data$AvgSiteTemp))] <- NA
# convert to non-ordered factor
ps@sam_data$AvgSiteTempGroup <- factor(ps@sam_data$AvgSiteTempGroup,
levels = c("<30.5","30.5-31",">31"))
# Remove unneeded columns
ps@sam_data[,grep("Range",names(ps@sam_data))] <- NULL
ps@sam_data$Barcode <- NULL
ps@sam_data$SpeciesTentative <- NULL
ps@sam_data
skimr::skim(ps@sam_data)
unique(ps@tax_table[,2])
# Clean up non-bacterial taxa ####
bact <- subset_taxa(ps, Kingdom == "Bacteria")
bact <- subset_taxa(bact, Phylum != "Cyanobacteria")
bact <- subset_taxa(bact, Family != "Mitochondria")
ps <- bact
BiocManager::install("msa")
BiocManager::install("msa")
# Analyses of Chagos Islands coral-associated bacteria 16S Amplicons
# Data cleaning and preparation - building a phylogeny
# Author: Geoffrey Zahn
# Packages and functions ####
library(tidyverse)
library(phyloseq)
library(vegan)
library(phangorn)
library(msa)
library(ape)
theme_set(theme_bw())
# Load phyloseq object from 01_Process_Raw_Data.R ####
ps <- readRDS("./output/phyloseq_object_16S_noncontam.RDS")
# Remove non-bacteria/archaea ####
ps <- subset_taxa(ps, Kingdom %in% c("Bacteria","Archaea"))
# Inspect and clean taxonomy
ps <- subset_taxa(ps, Phylum != "NA")
# Tidy up metadata ... proper date format, temp and salinity ranges, etc ####
# List sample variables
glimpse(ps@sam_data)
# Dates
ps@sam_data$date <- as.POSIXct(ps@sam_data$date,format = '%m/%d/%Y')
# Temp
ps@sam_data$`Temp Range (oC)`[is.na(ps@sam_data$`Temp Range (oC)`)] <- "NA-NA"
ps@sam_data$`Temp Range (oC)`[ps@sam_data$`Temp Range (oC)`=="Blank"] <- "Blank-Blank"
min <- as.numeric(unlist(map(str_split(ps@sam_data$`Temp Range (oC)`,"-"),1)))
max <- as.numeric(unlist(map(str_split(ps@sam_data$`Temp Range (oC)`,"-"),2)))
ps@sam_data$TempRangeMin <- min
ps@sam_data$TempRangeMax <- max
# Salinity
ps@sam_data$`Salinity Range (ppt)`[is.na(ps@sam_data$`Salinity Range (ppt)`)] <- "NA-NA"
ps@sam_data$`Salinity Range (ppt)`[ps@sam_data$`Salinity Range (ppt)`=="Blank"] <- "Blank-Blank"
min <- as.numeric(unlist(map(str_split(ps@sam_data$`Salinity Range (ppt)`,"-"),1)))
max <- as.numeric(unlist(map(str_split(ps@sam_data$`Salinity Range (ppt)`,"-"),2)))
ps@sam_data$SalinityRangeMin <- min
ps@sam_data$SalinityRangeMax <- max
# Depth
ps@sam_data$`Depth Range (m)` <- str_remove(ps@sam_data$`Depth Range (m)`,pattern = "m")
ps@sam_data$`Depth Range (m)`[is.na(ps@sam_data$`Depth Range (m)`)] <- "NA-NA"
ps@sam_data$`Depth Range (m)`[ps@sam_data$`Depth Range (m)`=="Blank"] <- "Blank-Blank"
min <- as.numeric(unlist(map(str_split(ps@sam_data$`Depth Range (m)`,"-"),1)))
max <- as.numeric(unlist(map(str_split(ps@sam_data$`Depth Range (m)`,"-"),2)))
ps@sam_data$DepthRangeMin <- min
ps@sam_data$DepthRangeMax <- max
# Remove Blank Controls ####
ps <- subset_samples(ps, Island != "Blank")
# Clean up Sample Data names ####
names(sample_data(ps)) <-
c("LibraryID","Barcode","SampleID","Date","Island","Site","Lat","Lon","ReefType","Exposure",
"SpeciesTentative","SpeciesConfirmed","ColonyColor","AvgSiteTemp","TempRange_C","Salinity",
"SalinityRange_ppt","Depth_m","DepthRange_m","TempRangeMin","TempRangeMax","SalinityRangeMin",
"SalinityRangeMax","DepthRangeMin","DepthRangeMax")
# Convert Sample Data classes ####
glimpse(sample_data(ps))
ps@sam_data$LibraryID <- as.character(ps@sam_data$LibraryID)
ps@sam_data$Lat <- as.numeric(ps@sam_data$Lat)
ps@sam_data$Lon <- as.numeric(ps@sam_data$Lon)
ps@sam_data$AvgSiteTemp <- as.numeric(ps@sam_data$AvgSiteTemp)
ps@sam_data$Salinity <- as.numeric(ps@sam_data$Salinity)
ps@sam_data$Depth_m <- as.numeric(ps@sam_data$Depth_m)
# Change ColonyColor to non-ordered factor (Healthy Coral as reference category)
ps@sam_data$ColonyColor <- plyr::mapvalues(ps@sam_data$ColonyColor,from = unique(ps@sam_data$ColonyColor),
to=c("Healthy","Pale","Bleached","Very pale"))
ps@sam_data$ColonyColor <- factor(ps@sam_data$ColonyColor,
levels = c("Healthy","Pale","Very pale","Bleached"))
# create 4 groups of avg temperature
clus <- kmeans(na.omit(ps@sam_data$AvgSiteTemp), 3)
clus$cluster[which(!is.na(ps@sam_data$AvgSiteTemp))] <- clus$cluster
ps@sam_data$AvgSiteTempGroup <- clus$cluster
plot(ps@sam_data$AvgSiteTemp,ps@sam_data$AvgSiteTempGroup)
ps@sam_data$AvgSiteTempGroup <- plyr::mapvalues(ps@sam_data$AvgSiteTempGroup,
from=as.character(unique(ps@sam_data$AvgSiteTempGroup)),
to=c("<30.5","30.5-31",">31"))
ps@sam_data$AvgSiteTempGroup[which(is.na(ps@sam_data$AvgSiteTemp))] <- NA
# convert to non-ordered factor
ps@sam_data$AvgSiteTempGroup <- factor(ps@sam_data$AvgSiteTempGroup,
levels = c("<30.5","30.5-31",">31"))
# Remove unneeded columns
ps@sam_data[,grep("Range",names(ps@sam_data))] <- NULL
ps@sam_data$Barcode <- NULL
ps@sam_data$SpeciesTentative <- NULL
ps@sam_data
skimr::skim(ps@sam_data)
unique(ps@tax_table[,2])
# Clean up non-bacterial taxa ####
bact <- subset_taxa(ps, Kingdom == "Bacteria")
bact <- subset_taxa(bact, Phylum != "Cyanobacteria")
bact <- subset_taxa(bact, Family != "Mitochondria")
ps <- bact
n_taxa(ps)
ntaxa(ps)
tax_table(ps)
tax_table(ps)[,1]
unique(tax_table(ps)[,1])
rownames(tax_table(ps))
seqs <- rownames(tax_table(ps))
names(seqs) <- seqs # This propagates to the tip labels of the tree
startmsa <- Sys.time()
endmsa <- Sys.time()
startmsa <- Sys.time()
endmsa <- Sys.time()
msa_elapsedtime <- difftime(startmsa,endmsa,"hours")
msa_elapsedtime
msa_elapsedtime <- difftime(endmsa,startmsa,units = "hours")
msa_elapsedtime
# alignment (took N hours to complete!)
startmsa <- Sys.time()
alignment <- msa(seqs,method = "Muscle", type = "dna",verbose = TRUE,order = "input",maxiters = 10)
endmsa <- Sys.time()
msa_elapsedtime <- difftime(endmsa,startmsa,units = "hours")
# save progress
saveRDS(alignment,"./output/Chagos_16S_dna_alignment_muscle.RDS")
msa_elapsedtime
# re-load point
# alignment <- readRDS("./output/Chagos_16S_dna_alignment_muscle.RDS")
phang.align = as.phyDat(alignment, type = "DNA")
# distance max likelihood
dm <- dist.ml(phang.align)
#save
saveRDS(dm,"./output/ML_Distance.RDS")
# neighbor-joining tree
treeNJ <- NJ(dm) # Note, tip order != sequence order
treeNJ$tip.label <- seqs
#save
saveRDS(treeNJ, "./output/treeNJ.RDS")
fit = pml(treeNJ, data=phang.align)
#save
saveRDS(fit,"./output/fit_treeNJ.RDS")
fitJC <- optim.pml(fit, TRUE)
# save
saveRDS(fitJC, "./output/Chagos_16S_tree_fitJC.RDS") # This is the new tree using optim.pml
write.tree(fitJC$tree, file = "./output/Chagos_16S_tree_JC.nwk")
# Bootstrap
bs = bootstrap.pml(fitJC, bs=100, control = pml.control(trace = 0),multicore = TRUE, mc.cores = 4)
saveRDS(bs,"./output/Chagos_16S_tree_fitJC_bootstrap.RDS")
# check tree with plot
plotBS(fitJC$tree,type="p")
fitJC$tree
bs
# check tree with plot
plotBS(bs,type="p")
# Packages and functions ####
library(tidyverse)
library(phyloseq)
library(vegan)
library(phangorn)
library(msa)
library(ape)
theme_set(theme_bw())
# Load phyloseq object from 01_Process_Raw_Data.R ####
ps <- readRDS("./output/phyloseq_object_16S_noncontam.RDS")
# Remove non-bacteria/archaea ####
ps <- subset_taxa(ps, Kingdom %in% c("Bacteria","Archaea"))
# Inspect and clean taxonomy
ps <- subset_taxa(ps, Phylum != "NA")
# List sample variables
glimpse(ps@sam_data)
# Dates
ps@sam_data$date <- as.POSIXct(ps@sam_data$date,format = '%m/%d/%Y')
# Temp
ps@sam_data$`Temp Range (oC)`[is.na(ps@sam_data$`Temp Range (oC)`)] <- "NA-NA"
ps@sam_data$`Temp Range (oC)`[ps@sam_data$`Temp Range (oC)`=="Blank"] <- "Blank-Blank"
min <- as.numeric(unlist(map(str_split(ps@sam_data$`Temp Range (oC)`,"-"),1)))
max <- as.numeric(unlist(map(str_split(ps@sam_data$`Temp Range (oC)`,"-"),2)))
ps@sam_data$TempRangeMin <- min
ps@sam_data$TempRangeMax <- max
# Salinity
ps@sam_data$`Salinity Range (ppt)`[is.na(ps@sam_data$`Salinity Range (ppt)`)] <- "NA-NA"
ps@sam_data$`Salinity Range (ppt)`[ps@sam_data$`Salinity Range (ppt)`=="Blank"] <- "Blank-Blank"
min <- as.numeric(unlist(map(str_split(ps@sam_data$`Salinity Range (ppt)`,"-"),1)))
max <- as.numeric(unlist(map(str_split(ps@sam_data$`Salinity Range (ppt)`,"-"),2)))
ps@sam_data$SalinityRangeMin <- min
ps@sam_data$SalinityRangeMax <- max
# Depth
ps@sam_data$`Depth Range (m)` <- str_remove(ps@sam_data$`Depth Range (m)`,pattern = "m")
ps@sam_data$`Depth Range (m)`[is.na(ps@sam_data$`Depth Range (m)`)] <- "NA-NA"
ps@sam_data$`Depth Range (m)`[ps@sam_data$`Depth Range (m)`=="Blank"] <- "Blank-Blank"
min <- as.numeric(unlist(map(str_split(ps@sam_data$`Depth Range (m)`,"-"),1)))
max <- as.numeric(unlist(map(str_split(ps@sam_data$`Depth Range (m)`,"-"),2)))
ps@sam_data$DepthRangeMin <- min
ps@sam_data$DepthRangeMax <- max
# Remove Blank Controls ####
ps <- subset_samples(ps, Island != "Blank")
# Clean up Sample Data names ####
names(sample_data(ps)) <-
c("LibraryID","Barcode","SampleID","Date","Island","Site","Lat","Lon","ReefType","Exposure",
"SpeciesTentative","SpeciesConfirmed","ColonyColor","AvgSiteTemp","TempRange_C","Salinity",
"SalinityRange_ppt","Depth_m","DepthRange_m","TempRangeMin","TempRangeMax","SalinityRangeMin",
"SalinityRangeMax","DepthRangeMin","DepthRangeMax")
# Convert Sample Data classes ####
glimpse(sample_data(ps))
ps@sam_data$LibraryID <- as.character(ps@sam_data$LibraryID)
ps@sam_data$Lat <- as.numeric(ps@sam_data$Lat)
ps@sam_data$Lon <- as.numeric(ps@sam_data$Lon)
ps@sam_data$AvgSiteTemp <- as.numeric(ps@sam_data$AvgSiteTemp)
ps@sam_data$Salinity <- as.numeric(ps@sam_data$Salinity)
ps@sam_data$Depth_m <- as.numeric(ps@sam_data$Depth_m)
ps@sam_data$ColonyColor <- plyr::mapvalues(ps@sam_data$ColonyColor,from = unique(ps@sam_data$ColonyColor),
to=c("Healthy","Pale","Bleached","Very pale"))
ps@sam_data$ColonyColor <- factor(ps@sam_data$ColonyColor,
levels = c("Healthy","Pale","Very pale","Bleached"))
# create 4 groups of avg temperature
clus <- kmeans(na.omit(ps@sam_data$AvgSiteTemp), 3)
clus$cluster[which(!is.na(ps@sam_data$AvgSiteTemp))] <- clus$cluster
ps@sam_data$AvgSiteTempGroup <- clus$cluster
plot(ps@sam_data$AvgSiteTemp,ps@sam_data$AvgSiteTempGroup)
ps@sam_data$AvgSiteTempGroup <- plyr::mapvalues(ps@sam_data$AvgSiteTempGroup,
from=as.character(unique(ps@sam_data$AvgSiteTempGroup)),
to=c("<30.5","30.5-31",">31"))
ps@sam_data$AvgSiteTempGroup[which(is.na(ps@sam_data$AvgSiteTemp))] <- NA
# convert to non-ordered factor
ps@sam_data$AvgSiteTempGroup <- factor(ps@sam_data$AvgSiteTempGroup,
levels = c("<30.5","30.5-31",">31"))
# Remove unneeded columns
ps@sam_data[,grep("Range",names(ps@sam_data))] <- NULL
ps@sam_data$Barcode <- NULL
ps@sam_data$SpeciesTentative <- NULL
ps@sam_data
skimr::skim(ps@sam_data)
unique(ps@tax_table[,2])
# Clean up non-bacterial taxa ####
bact <- subset_taxa(ps, Kingdom == "Bacteria")
bact <- subset_taxa(bact, Phylum != "Cyanobacteria")
bact <- subset_taxa(bact, Family != "Mitochondria")
ps <- bact
ntaxa(ps)
seqs <- rownames(tax_table(ps))
names(seqs) <- seqs # This propagates to the tip labels of the tree
# re-load point
bs <- readRDS("./output/trees/Chagos_16S_tree_fitJC_bootstrap.RDS")
# reload point
fitJC <- readRDS("./output/trees/Chagos_16S_tree_JC.nwk")
# reload point
fitJC <- readRDS("./output/trees/Chagos_16S_tree_fitJC.RDS")
# check tree with plot
plotBS(fitJC$tree,type="p")
fitJC$tree
fitJC$
# check tree with plot
plotBS(fitJC$tree,bs,type="p")
fitJC$
# check tree with plot
plotBS(fitJC$tree,bs,type="unrooted")
fitJC$
# check tree with plot
plotBS(fitJC,bs,type="unrooted")
#### redo with GTR model
fitGTR <- update(fit, k=4, inv=0.2)
# re-load
fit <- readRDS("./output/trees/fit_treeNJ.RDS")
treeNJ <- readRDS("./output/trees/treeNJ.RDS")
#### redo with GTR model
fitGTR <- update(fit, k=4, inv=0.2)
fitGTR <- phangorn::optim.pml(fitGTR, model="GTR", optInv=TRUE, optGamma=TRUE,
control = phangorn::pml.control(trace = 1L),rearrangement = "stochastic")
saveRDS(fitGTR, "./output/trees/Chagos_16S_fitGTR2.RDS") # This is the new tree using optim.pml
write.tree(fitGTR$tree, file = "./output/trees/Chagos_16S_fitGTR2_tree.nwk")
# reassign bootstrap values with GTR model fits
bs = bootstrap.pml(fitGTR, bs=100, optNni=TRUE, multicore=TRUE)
?fit()
?optim.pml
?bootstrap.pml
?update()
